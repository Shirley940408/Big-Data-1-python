1. What happened when you inserted another row with the same primary key as an existing row?
it overwrites the existing row with the new values for the same primary key.
Any unspecified columns keep their previous values.

2.What happened when you query a keyspace with replication factor 1 and one node down? How did it behave with replication factor 2 and a node down?

cqlsh:sya236> CONSISTENCY ONE;
Consistency level set to ONE.
cqlsh:sya236> SELECT * FROM t WHERE id IN (1,2,3,10,20,30,100,200,300);

 id  | data
-----+------
   1 |    a
   2 |    b
   3 |    c
  10 |    x
  20 |    y
  30 |    z
 100 |    m
 200 |    n
 300 |    p

(9 rows)
cqlsh:sya236> SELECT * FROM t WHERE id IN (1,2,3,10,20,30,100,200,300);
NoHostAvailable: ('Unable to complete the operation against any hosts', {<Host: 10.17.203.211:9042 datacenter1>: Unavailable('Error from server: code=1000 [Unavailable exception] message="Cannot achieve consistency level ONE" info={\'consistency\': \'ONE\', \'required_replicas\': 1, \'alive_replicas\': 0}')})
cqlsh:sya236> SELECT * FROM test;
NoHostAvailable: ('Unable to complete the operation against any hosts', {<Host: 10.17.203.211:9042 datacenter1>: Unavailable('Error from server: code=1000 [Unavailable exception] message="Cannot achieve consistency level ALL" info={\'consistency\': \'ALL\', \'required_replicas\': 2, \'alive_replicas\': 1}')})
cqlsh:sya236> SELECT * FROM test WHERE id=1;
NoHostAvailable: ('Unable to complete the operation against any hosts', {<Host: 10.17.203.211:9042 datacenter1>: Unavailable('Error from server: code=1000 [Unavailable exception] message="Cannot achieve consistency level ALL" info={\'consistency\': \'ALL\', \'required_replicas\': 2, \'alive_replicas\': 1}')})
cqlsh:sya236> CONSISTENCY ONE;
Consistency level set to ONE.
cqlsh:sya236> SELECT * FROM test WHERE id=1;

 id | data
----+---------
  1 | initial

(1 rows)

cqlsh:sya236> SELECT * FROM test
          ... ;

 id | data
----+-------------
  5 |        cinq
  1 |     initial
  8 |   octagonal
  2 |      double
  4 |      square
  7 |    sevenish
  6 | hexadecimal
  9 |        neun
  3 |    tertiary

When the replication factor was 1:
With CONSISTENCY ONE, both inserts and queries failed when the node responsible for the partition was down.
Because there was only a single replica, and that replica was unavailable, Cassandra could not satisfy the required consistency level.
With CONSISTENCY ALL, behavior was the same: since there was only one replica, it also failed when that node was down.
In this case, ONE and ALL are effectively equivalent, because both require the only replica to be alive.
When the replication factor was 2:
With CONSISTENCY ONE, inserts and queries succeeded even when one node was down,
because Cassandra only needed one replica to respond, and the other node was still available.
With CONSISTENCY ALL, both operations failed when one node was down,
because Cassandra required both replicas to acknowledge the operation, and one was unavailable.
In summary, the outcome depended on the chosen consistency level.
CONSISTENCY ONE allows operations to succeed as long as at least one replica is alive,
while CONSISTENCY ALL requires all replicas to be reachable, failing if any node is down.

3. How did the consistency level affect the results with the node up/down?
The results depended on the chosen consistency level.
With CONSISTENCY ONE, both read and write operations succeeded as long as at least one replica was up.
When a node was down, Cassandra could still complete the operation using the remaining replica(s).
With CONSISTENCY ALL, operations failed whenever any replica was down,
since Cassandra required every replica to acknowledge the operation for it to be considered successful.
In summary, lower consistency levels like ONE favor availability under node failures,
while higher levels like ALL favor consistency but reduce fault tolerance.

4. Which of the WHERE id=? values returned successfully with CONSISTENCY ALL when one of the nodes was down? Why do you think some could be returned but not others?

5. What was the CREATE TABLE statement you used for the nasalogs table? What was the primary key you choose, and why?
CREATE TABLE nasalogs (
  host text,
  datetime timestamp,
  path text,
  bytes int,
  req_id timeuuid,
  PRIMARY KEY ((host), datetime, req_id)
) WITH CLUSTERING ORDER BY (datetime ASC);

I have chosen host as primary partition key for making the same host together on the same node. In this way we could easily aggregrate by host for later analysis.
I have also chosen datatime as cluster key, for it would be easy to sort base on time sequence.
And the same host could also get http response at the same minute, thus we need another unique id to make the difference, which is req_id (a unique timeuuid).
In summary, this schema keeps all log entries for the same host on one node, sorted by request time, while preventing overwrites caused by identical timestamps.
